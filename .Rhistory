"surface_thermal_radiation_downwards")
my_user <- "143591"
my_key <- "d1702105-6677-4fec-9f20-a4b5c6634b3e"
Myfolder <- "C:/Users/nkwalale/Desktop/Era5"
Download_ERA5(years = my_years,freq = "hourly",lon = lon ,lat = lat,vars = variable,cds.key = my_key,user = my_user,datapath = Myfolder)
source("C:/Users/nkwalale/Desktop/ERA5DownloadFunction/Function_download_ERA5_to_point_Lipa.R")
my_years <- as.character(c(2015:2018))
# location of interest
lon <- -2.98  # longitude of location
lat <- 54.35 # latitude  of location
# choose variables of interest
variable  <- c("10m_u_component_of_wind",
"10m_v_component_of_wind",
"2m_dewpoint_temperature",
"2m_temperature",
"total_cloud_cover",
"total_precipitation",
"surface_solar_radiation_downwards",
"surface_thermal_radiation_downwards")
my_user <- "143591"
my_key <- "d1702105-6677-4fec-9f20-a4b5c6634b3e"
Myfolder <- "C:/Users/nkwalale/Desktop/Era5"
Download_ERA5(years = my_years,freq = "hourly",lon = lon ,lat = lat,vars = variable,cds.key = my_key,user = my_user,datapath = Myfolder)
source("C:/Users/nkwalale/Desktop/ERA5DownloadFunction/Function_download_ERA5_to_point_Lipa.R")
my_years <- as.character(c(2015:2018))
# location of interest
lon <- -2.98  # longitude of location
lat <- 54.35 # latitude  of location
# choose variables of interest
variable  <- c("10m_u_component_of_wind",
"10m_v_component_of_wind",
"2m_dewpoint_temperature",
"2m_temperature",
"total_cloud_cover",
"total_precipitation",
"surface_solar_radiation_downwards",
"surface_thermal_radiation_downwards")
my_user <- "143591"
my_key <- "d1702105-6677-4fec-9f20-a4b5c6634b3e"
Myfolder <- "C:/Users/nkwalale/Desktop/Era5"
Download_ERA5(years = my_years,freq = "hourly",lon = lon ,lat = lat,vars = variable,cds.key = my_key,user = my_user,datapath = Myfolder)
source("C:/Users/nkwalale/Desktop/ERA5DownloadFunction/Function_download_ERA5_to_point_Lipa.R")
my_years <- as.character(c(2015:2018))
# location of interest
lon <- 10.20  # longitude of location
lat <- 50.98 # latitude  of location
# choose variables of interest
variable  <- c("10m_u_component_of_wind",
"10m_v_component_of_wind",
"2m_dewpoint_temperature",
"2m_temperature",
"total_cloud_cover",
"total_precipitation",
"surface_solar_radiation_downwards",
"surface_thermal_radiation_downwards")
my_user <- "143591"
my_key <- "d1702105-6677-4fec-9f20-a4b5c6634b3e"
Myfolder <- "C:/Users/nkwalale/Desktop/Era5"
Download_ERA5(years = my_years,freq = "hourly",lon = lon ,lat = lat,vars = variable,cds.key = my_key,user = my_user,datapath = Myfolder)
source("C:/Users/nkwalale/Desktop/ERA5DownloadFunction/Function_download_ERA5_to_point_Lipa.R")
my_years <- as.character(c(2012:2021))
# location of interest
lon <- 10.20  # longitude of location
lat <- 50.98 # latitude  of location
# choose variables of interest
variable  <- c("10m_u_component_of_wind",
"10m_v_component_of_wind",
"2m_dewpoint_temperature",
"2m_temperature",
"total_cloud_cover",
"total_precipitation",
"surface_solar_radiation_downwards",
"surface_thermal_radiation_downwards")
my_user <- "143591"
my_key <- "d1702105-6677-4fec-9f20-a4b5c6634b3e"
Myfolder <- "C:/Users/nkwalale/Desktop/Era5"
Download_ERA5(years = my_years,freq = "hourly",lon = lon ,lat = lat,vars = variable,cds.key = my_key,user = my_user,datapath = Myfolder)
install.packages("remotes")
install.packages("ggplot2")
install.packages("ggpubr")
install.packages("reshape")
remotes::install_github("GLEON/rLakeAnalyzer")
remotes::install_github("GLEON/rLakeAnalyzer")
remotes::install_github("aemon-j/GLM3r", ref = "v3.1.1")
remotes::install_github("USGS-R/glmtools", ref = "ggplot_overhaul")
remotes::install_github("aemon-j/FLakeR", ref = "inflow")
install.packages("remotes")
install.packages("remotes")
---
title: "NEON forecast challenge - GLEON2022"
author: Freya Olsson
output:
html_document:
number_sections: true
toc: true
pdf_document:
number_sections: true
date: "`r Sys.Date()`"
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # install.packages('tidyverse'), collection of R packages for data manipulation, analysis and visualisation
library(lubridate)
```
---
title: "NEON forecast challenge - GLEON2022"
author: Freya Olsson
output:
html_document:
number_sections: true
toc: true
pdf_document:
number_sections: true
date: "`r Sys.Date()`"
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse) # install.packages('tidyverse'), collection of R packages for data manipulation, analysis and visualisation
library(lubridate)
#read in the targets data
targets <- read_csv('https://data.ecoforecast.org/neon4cast-targets/aquatics/aquatics-targets.csv.gz')
LakeVHODS <- data.frame(Name, Year)
2.3^0.1
library(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
?version
R.version.string
reclassified <- c(0.01479910,0.03738720,0.04361839,0.06391304,0.02050781, 0.08493591, 0.11769690,
0.13771751, 0.2302181, 0.1437844, 0.1431777, 0.13409389, 0.09789281, 0.5381118,
0.5566673, 0.2216889, 0.04386046, 0.02392635, 0.03170726, 0.02691812, 0.02439708,
0.01728288, 0.01826784, 0.02810196, 0.02435639, 0.02502880, 0.02591482, 0.03884672)
median_reclassified <- median(reclassified)
old <- c(0.11769690,0.13771751, 0.06391304, 0.02050781, 0.09789281, 0.5381118, 0.5566673,
0.2302181, 0.1437844, 0.1431777, 0.01479910, 0.03738720, 0.04361839, 0.013097542,
0.03648601, 0.04490586, 0.2216889, 0.03884672, 0.02392635, 0.03170726, 0.02691812,
0.01826784, 0.01728288, 0.02439708)
median_old <- median(old)
library(ggplot2)
set.seed(123)
df <- data.frame(
x = rnorm(100),
y = rnorm(100),
category = rep(c('A', 'B', 'C', 'D'), each = 25)
)
View(df)
ggplot(df, aes(x = x, y = y)) +
geom_point() +
facet_grid(rows = vars(category), cols = vars(.))
rlang::last_trace()
df_filtered <- df[df$category != "A", ]
str(df)
remove.packages("GLMr")
remove.packages("GLM3r")
install.packages("SEEFO")
devtools::install_gitlab(repo="shatwell/seefo", host="https://git.ufz.de/")
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(ggpubr)
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(ggpubr)
?SEEFO
?strat_phenology()
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(ggpubr)
library(lubridate)
library(dplyr)
library(CFtime)
library(zoo)
library(tidyverse)
library(purrr)
setwd("C:/Users/nkwalale/Documents/Download_Test")
#filtering files by type
file_list <- list.files()
b_temp_files <- grep("bottemp", file_list, value = TRUE)
s_temp_files <- grep("surftemp", file_list, value = TRUE)
strat_files <- grep("_strat", file_list, value = TRUE)
model <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 1) #extracting the model names
gcm <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 2)
scen <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 4)
name <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 8)
working_data <- data.frame()
library(ncdf4) # package for netcdf manipulation
library(raster) # package for raster manipulation
library(ggpubr)
library(lubridate)
library(dplyr)
library(CFtime)
library(zoo)
library(tidyverse)
library(purrr)
setwd("C:/Users/nkwalale/Documents/Download_Test")
# List all files
file_list <- list.files()
# Filter files based on specific patterns
b_temp_files <- grep("bottemp", file_list, value = TRUE)
s_temp_files <- grep("surftemp", file_list, value = TRUE)
strat_files <- grep("_strat", file_list, value = TRUE)
# Extract the model names, gcm, scenario, and lake names
model <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 1)
gcm <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 2)
scen <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 4)
lake <- sapply(strsplit(b_temp_files, split = "_", fixed = TRUE), `[`, 8)
# Create an empty data frame to store the results
ISIMIP_data <- data.frame()
# Unique combinations of gcm, scen, and lake
unique_gcm <- unique(gcm)
unique_scen <- unique(scen)
unique_lake <- unique(lake)
# Nested for loops for each combination of gcm, scen, and lake
for (g in unique_gcm) {
for (s in unique_scen) {
for (l in unique_lake) {
# Filter files for the specific gcm, scen, and lake
b_temp_files_filtered <- b_temp_files[gcm == g & scen == s & lake == l]
s_temp_files_filtered <- s_temp_files[gcm == g & scen == s & lake == l]
strat_files_filtered <- strat_files[gcm == g & scen == s & lake == l]
# Loop through each filtered file set
for (i in seq_along(b_temp_files_filtered)) {
# Open and read bottemp file
nc_data <- nc_open(b_temp_files_filtered[i])
dates <- as.Date(as_timestamp(CFtime(nc_data$dim$time$units, nc_data$dim$time$calendar, nc_data$dim$time$vals)))
bt <- ncvar_get(nc_data, "bottemp")
nc_close(nc_data)
# Open and read surftemp file
nc_data <- nc_open(s_temp_files_filtered[i])
st <- ncvar_get(nc_data, "surftemp")
nc_close(nc_data)
# Open and read strat file
nc_data <- nc_open(strat_files_filtered[i])
strat <- ncvar_get(nc_data, "strat")
nc_close(nc_data)
# Create a data frame for the current set of data
data_nc <- data.frame(
dates = dates,
bt = bt,
st = st,
strat = strat,
model = model[gcm == g & scen == s & lake == l][i],
gcm = g,
scen = s,
lake = l
)
# Append the data to the main data frame
ISIMIP_data <- rbind(ISIMIP_data, data_nc)
}
}
}
}
View(ISIMIP_data)
#LER Stratification#####
ISIMIP <- ISIMIP_data |>
filter(st > bt) #removing winter stratification
View(ISIMIP)
ISIMIP$strat <- ifelse(ISIMIP$strat == 0, NA, ISIMIP$strat)
unique(ISIMIP$strat)
library(data.table)
longest_stretch_ISIMIP <- ISIMIP %>%
mutate(year = year(dates)) %>%
group_by(lake, gcm, scen, year) %>%
group_modify(~ {
ts_zoo <- zoo(.x$strat, .x$dates)
if (all(is.na(ts_zoo))) {
return(tibble()) # Return an empty tibble if all values are NA
}
longest_zoo <- na.contiguous(ts_zoo)
longest_dates <- index(longest_zoo)
.x %>% filter(dates %in% longest_dates)
}) %>%
ungroup()
View(longest_stretch_ISIMIP)
sum(is.na(longest_stretch_ISIMIP$strat))
longer_strat_LER <- data.frame()
longer_strat_LER <- longest_stretch_LER |> drop_na(strat)
longer_strat_LER <- longest_stretch_ISIMIP |> drop_na(strat)
scenarios <- unique(longer_strat_LER$scen)
models <- unique(longer_strat_LER$model)
gcm <- unique(longer_strat_LER$gcm)
# Define the function to get yearly average
get_yearly_averages <- function(gcm_name, scen_name, model_name, lake_name, data) {
strat_data <- data |>
filter(gcm == gcm_name) |>
filter(scen == scen_name) |>
filter(model == model_name) |>
filter(lake == lake_name) |>
group_by(year) |>
summarize(strat.dur = n(), ave.temp = mean(bt, na.rm = TRUE)) |>
mutate(GCM = gcm_name, Scen = scen_name, Model = model_name, Lake = lake_name)
data.frame(
Year = strat_data$year,
Strat.dur = strat_data$strat.dur,
Temp_K = strat_data$ave.temp,
Model = strat_data$Model,
Scenario = strat_data$Scen
)
}
combinations <- expand.grid(scen_name = scenarios, model_name = models, stringsAsFactors = FALSE)
View(combinations)
combinations <- expand.grid(gcm_name = gcms, scen_name = scenarios, model_name = models, lake_name = lakes, stringsAsFactors = FALSE)
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, lake_name = lakes, stringsAsFactors = FALSE)
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, lake_name = lake, stringsAsFactors = FALSE)
View(combinations)
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, stringsAsFactors = FALSE)
View(combinations)
ISI_play <- pmap_dfr(combinations, get_yearly_averages, data = longer_strat_LER)
scenarios <- unique(longer_strat_LER$scen)
models <- unique(longer_strat_LER$model)
gcm <- unique(longer_strat_LER$gcm)
lake <- unique(longer_strat_LER$lake)
# Define the function to get yearly average
get_yearly_averages <- function(gcm_name, scen_name, model_name, lake_name, data) {
strat_data <- data |>
filter(gcm == gcm_name) |>
filter(scen == scen_name) |>
filter(model == model_name) |>
filter(lake == lake_name) |>
group_by(year) |>
summarize(strat.dur = n(), ave.temp = mean(bt, na.rm = TRUE)) |>
mutate(GCM = gcm_name, Scen = scen_name, Model = model_name, Lake = lake_name)
data.frame(
Year = strat_data$year,
Strat.dur = strat_data$strat.dur,
Temp_K = strat_data$ave.temp,
Model = strat_data$Model,
Scenario = strat_data$Scen
)
}
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, stringsAsFactors = FALSE)
ISI_play <- pmap_dfr(combinations, get_yearly_averages, data = longer_strat_LER)
View(longer_strat_LER)
# Define the function to get yearly average
get_yearly_averages <- function(gcm_name, scen_name, model_name, lake_name, data) {
strat_data <- data |>
filter(gcm == gcm_name) |>
filter(scen == scen_name) |>
filter(model == model_name) |>
filter(lake == lake_name) |>
group_by(year) |>
summarize(strat.dur = n(), ave.temp = mean(bt, na.rm = TRUE)) |>
mutate(GCM = gcm_name, Scen = scen_name, Model = model_name, Lake = lake_name)
data.frame(
Year = strat_data$year,
Strat.dur = strat_data$strat.dur,
Temp_K = strat_data$ave.temp,
Model = strat_data$Model,
Scenario = strat_data$Scen,
Lake = strat_data$lake
)
}
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, stringsAsFactors = FALSE)
ISI_play <- pmap_dfr(combinations, get_yearly_averages, data = longer_strat_LER)
# Ensure combinations includes lake_name
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, lake_name = lake, stringsAsFactors = FALSE)
View(combinations)
# Use pmap_dfr correctly
library(purrr)
library(dplyr)
ISI_play <- pmap_dfr(combinations, ~get_yearly_averages(..1, ..2, ..3, ..4, longer_strat_LER))
# Define the function to get yearly average
get_yearly_averages <- function(gcm_name, scen_name, model_name, lake_name, data) {
strat_data <- data |>
filter(gcm == gcm_name) |>
filter(scen == scen_name) |>
filter(model == model_name) |>
filter(lake == lake_name) |>
group_by(year) |>
summarize(strat.dur = n(), ave.temp = mean(bt, na.rm = TRUE)) |>
mutate(GCM = gcm_name, Scen = scen_name, Model = model_name, lake = lake_name)
data.frame(
Year = strat_data$year,
Strat.dur = strat_data$strat.dur,
Temp_K = strat_data$ave.temp,
Model = strat_data$Model,
Scenario = strat_data$Scen,
Lake = strat_data$lake
)
}
# Ensure combinations includes lake_name
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, lake_name = lake, stringsAsFactors = FALSE)
ISI_play <- pmap_dfr(combinations, ~get_yearly_averages(..1, ..2, ..3, ..4, longer_strat_LER))
View(ISI_play)
# Define the function to get yearly average
get_yearly_averages <- function(gcm_name, scen_name, model_name, lake_name, data) {
strat_data <- data |>
filter(gcm == gcm_name) |>
filter(scen == scen_name) |>
filter(model == model_name) |>
filter(lake == lake_name) |>
group_by(year) |>
summarize(strat.dur = n(), ave.temp = mean(bt, na.rm = TRUE)) |>
mutate(GCM = gcm_name, Scen = scen_name, Model = model_name, lake = lake_name)
data.frame(
GCM = strat_data$gcm,
Year = strat_data$year,
Strat.dur = strat_data$strat.dur,
Temp_K = strat_data$ave.temp,
Model = strat_data$model,
Scenario = strat_data$scen,
Lake = strat_data$lake
)
}
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, stringsAsFactors = FALSE)
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, lake_name = lake, stringsAsFactors = FALSE)
ISI_play <- pmap_dfr(combinations, ~get_yearly_averages(..1, ..2, ..3, ..4, longer_strat_LER))
get_yearly_averages <- function(gcm_name, scen_name, model_name, lake_name, data) {
strat_data <- data |>
filter(gcm == gcm_name) |>
filter(scen == scen_name) |>
filter(model == model_name) |>
filter(lake == lake_name) |>
group_by(year) |>
summarize(strat.dur = n(), ave.temp = mean(bt, na.rm = TRUE), .groups = 'drop') |>
mutate(GCM = gcm_name, Scen = scen_name, Model = model_name, lake = lake_name)
if (nrow(strat_data) == 0) {
return(data.frame(
GCM = character(0),
Year = integer(0),
Strat.dur = integer(0),
Temp_K = numeric(0),
Model = character(0),
Scenario = character(0),
Lake = character(0)
))
}
data.frame(
GCM = strat_data$GCM,
Year = strat_data$year,
Strat.dur = strat_data$strat.dur,
Temp_K = strat_data$ave.temp,
Model = strat_data$Model,
Scenario = strat_data$Scen,
Lake = strat_data$lake
)
}
combinations <- expand.grid(gcm_name = gcm, scen_name = scenarios, model_name = models, lake_name = lake, stringsAsFactors = FALSE)
ISI_play <- pmap_dfr(combinations, ~get_yearly_averages(..1, ..2, ..3, ..4, longer_strat_LER))
View(ISI_play)
sum(ISI_play$strat >= 365)
sum(ISI_play$Strat.dur >= 365)
sum(ISI_play$Strat.dur >= 300)
sum(ISI_play$Strat.dur >= 300 & ISI_play$Lake == "bosumtwi")
sum(ISI_play$Strat.dur >= 300 & ISI_play$Lake == "rappbode")
sum(ISI_play$Strat.dur >= 300 & ISI_play$Lake == "kivu")
unique(ISI_play$GCM)
Bos <- ISI_play |>
filter(GCM == "gfdl-esm4") |>
filter(Lake == 'bosumtwi') |>
filter(Model =="flake-ler")
View(Bos)
Bos <- ISI_play |>
filter(GCM == "gfdl-esm4") |>
filter(Lake == 'bosumtwi') |>
filter(Model =="flake-ler") |>
filter(Scenario == "picontrol")
View(Bos)
BosOG <- longer_strat_LER |>
filter(gcm == "gfdl-esm4") |>
filter(lake == 'bosumtwi') |>
filter(model =="flake-ler") |>
filter(scen == "picontrol") |>
filter(year == 2029)
View(BosOG)
BosOG.33 <- longer_strat_LER |>
filter(gcm == "gfdl-esm4") |>
filter(lake == 'bosumtwi') |>
filter(model =="flake-ler") |>
filter(scen == "picontrol") |>
filter(year == 2033)
view
view(BosOG.33)
BosOG.68 <- longer_strat_LER |>
filter(gcm == "gfdl-esm4") |>
filter(lake == 'bosumtwi') |>
filter(model =="flake-ler") |>
filter(scen == "picontrol") |>
filter(year == 2068)
view(BosOG.68)
View(ISI_play)
unique(ISI_play$GCM)
write.table(ISI_play, file = "three_lakes.txt", sep = "\t", row.names = FALSE, col.names = TRUE)
library(ncdf4) # package for netcdf manipulation
library(ggplot2) # package for plotting
library(ggpubr)
library(lubridate)
library(dplyr)
library(CFtime)
library(zoo)
library(plot3D)
library(tidyr)
library(rLakeAnalyzer)
setwd('C:/Users/nkwalale/Documents/Rappbode_ISIMIP_test/Volume Weighted Temps')
# list files
files <- list.files("Lakes/") |> grep(pattern = ".*-ler_.+r", x = _, value = TRUE)
setwd('C:/Users/nkwalale/Documents/Rappbode_ISIMIP_test/Volume Weighted Temps/Lakes')
library(ncdf4) # package for netcdf manipulation
library(ggplot2) # package for plotting
library(ggpubr)
library(lubridate)
library(dplyr)
library(CFtime)
library(zoo)
library(plot3D)
library(tidyr)
library(rLakeAnalyzer)
setwd('C:/Users/nkwalale/Documents/Rappbode_ISIMIP_test/Volume Weighted Temps/Lakes')
getwd()
?change wd
?setwd
